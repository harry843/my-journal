name: 'Send New Blog Post Notification'

on:
  repository_dispatch:
    types: [sanity_blog_published]

jobs:
  retrieve-subscribers:
    runs-on: ubuntu-latest
    steps:
      - name: 'Retrieve Active Subscribers from Buttondown'
        id: retrieve_subscribers
        run: |
          echo "## Retrieving active subscribers from Buttondown"
          
          # Make API request and format data with jq
          SUBSCRIBERS_DATA=$(curl -s -X GET "https://api.buttondown.email/v1/subscribers" -H "Authorization: Token ${{ secrets.BUTTONDOWN_API_KEY }}" | jq '[.results[] | select(.type != "unactivated") | {firstName: .metadata.firstName, lastName: .metadata.surname, email: .email_address, language: .metadata.language}]')

          # Save the output to a file
          echo "$SUBSCRIBERS_DATA" > subscribers_data.json

          # Debug: Print the value being set
          echo "Subscribers Data: $(cat subscribers_data.json)"

      - name: 'Upload Subscribers Data'
        uses: actions/upload-artifact@v4
        with:
          name: subscribers_data
          path: subscribers_data.json

  filter-webhook-data:
    runs-on: ubuntu-latest
    steps:
      - name: 'Filter Webhook Data for English Content'
        id: filter_english_content
        run: |
          echo "## Filtering English blog post from webhook data"

          # Parse the payload into a JSON object
          PAYLOAD_JSON='${{ toJson(github.event.client_payload) }}'
          PAYLOAD_JSON=$(echo "$PAYLOAD_JSON" | jq -c '.')

          # Check if payload is empty
          if [ -z "$PAYLOAD_JSON" ]; then
            echo "Payload is empty!"
            exit 1
          fi

          # Filter for English content
          ENGLISH_POST=$(echo "$PAYLOAD_JSON" | jq -c 'select(.language == "en")')

          # Save the output to a file
          echo "$ENGLISH_POST" > english_post.json

          # Debug: Print the value being set
          echo "Value being set for english_post: $(cat english_post.json)"

      - name: 'Upload English Post'
        uses: actions/upload-artifact@v4
        with:
          name: english_post
          path: english_post.json

      - name: 'Filter Webhook Data for Spanish Content'
        id: filter_spanish_content
        run: |
          echo "## Filtering Spanish blog post from webhook data"

          # Parse the payload into a JSON object
          PAYLOAD_JSON='${{ toJson(github.event.client_payload) }}'
          PAYLOAD_JSON=$(echo "$PAYLOAD_JSON" | jq -c '.')

          # Check if payload is empty
          if [ -z "$PAYLOAD_JSON" ]; then
            echo "Payload is empty!"
            exit 1
          fi

          # Filter for Spanish content
          SPANISH_POST=$(echo "$PAYLOAD_JSON" | jq -c 'select(.language == "es")')
          
          # Save the output to a file
          echo "$SPANISH_POST" > spanish_post.json

          # Debug: Print the value being set
          echo "Value being set for spanish_post: $(cat spanish_post.json)"

      - name: 'Upload Spanish Post'
        uses: actions/upload-artifact@v4
        with:
          name: spanish_post
          path: spanish_post.json

  send-english-emails:
    runs-on: ubuntu-latest
    needs: [filter-webhook-data, retrieve-subscribers]
    steps:
      - name: 'Download English Post'
        uses: actions/download-artifact@v4
        with:
          name: english_post
          path: .

      - name: 'Check if English Post Exists'
        id: check_english_post
        run: |
          if [[ -f "english_post.json" && -s "english_post.json" ]]; then
            echo "english_post_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "english_post_exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: 'Download Subscribers Data'
        if: ${{ steps.check_english_post.outputs.english_post_exists == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: subscribers_data
          path: .

      - name: 'Read English Post'
        if: ${{ steps.check_english_post.outputs.english_post_exists == 'true' }}
        id: read_english_post
        run: |
          echo "## Reading English post from file"
          cat english_post.json

      - name: 'Filter English Subscribers'
        if: ${{ steps.check_english_post.outputs.english_post_exists == 'true' }}
        id: filter_english
        run: |
          echo "## Filtering English subscribers"
          SUBSCRIBERS_DATA=$(cat subscribers_data.json)
          ENGLISH_SUBSCRIBERS=$(echo "$SUBSCRIBERS_DATA" | jq -r '.[] | select(.language == "en" or .language == null) | .email' | tr '\n' ',' | sed 's/,$//')
          echo "english_emails=${ENGLISH_SUBSCRIBERS}" >> "$GITHUB_ENV"
          echo "English Subscribers: $ENGLISH_SUBSCRIBERS"

      - name: 'Send Email to English Subscribers'
        if: ${{ steps.check_english_post.outputs.english_post_exists == 'true' }}
        run: |
          echo "## Sending email to English subscribers"
          ENGLISH_POST=$(cat english_post.json)
          ENGLISH_EMAILS="$english_emails"

          # Construct the HTML body
          HTML_BODY=$(cat <<EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>New Blog Post</title>
            <style>
              @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600&display=swap');
              body {
                font-family: 'Inter', sans-serif;
                background-color: #f8f9fa;
                color: #333;
                text-align: center;
                padding: 40px 0;
              }
              .card-container {
                display: flex;
                justify-content: center;
                align-items: center;
                margin: 20px;
              }
              .card {
                max-width: 500px;
                background: white;
                border-radius: 12px;
                box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
                overflow: hidden;
                text-decoration: none;
                transition: transform 0.2s ease-in-out;
              }
              .card:hover {
                transform: scale(1.03);
              }
              .card img {
                width: 100%;
                height: auto;
                border-bottom: 1px solid #ddd;
              }
              .card-content {
                padding: 20px;
              }
              .card-title {
                font-size: 20px;
                font-weight: 600;
                margin-bottom: 10px;
                color: #222;
              }
              .card-description {
                font-size: 16px;
                font-weight: 400;
                color: #555;
                line-height: 1.5;
              }
              .footer {
                margin-top: 30px;
                font-size: 14px;
                color: #777;
              }
            </style>
          </head>
          <body>
            <div class="card-container">
              <a href="$(echo "$ENGLISH_POST" | jq -r '.url')" class="card">
                <img src="$(echo "$ENGLISH_POST" | jq -r '.imageUrl')" alt="Blog Image">
                <div class="card-content">
                  <div class="card-title">$(echo "$ENGLISH_POST" | jq -r '.title')</div>
                  <div class="card-description">$(echo "$ENGLISH_POST" | jq -r '.feature')</div>
                </div>
              </a>
            </div>
            <p class="footer">You're receiving this email because you subscribed to updates. <br></p>
          </body>
          </html>
          EOF
          )

          # Construct the JSON payload
          PAYLOAD=$(jq -n \
            --arg subject "New Post: $(echo "$ENGLISH_POST" | jq -r '.title')" \
            --arg from "harry-kelleher@buttondown.email" \
            --arg to "$ENGLISH_EMAILS" \
            --arg html_body "$HTML_BODY" \
            '{
              subject: $subject,
              from: $from,
              to: $to,
              html_body: $html_body
            }')

          # Send the email
          curl -X POST "https://api.buttondown.email/v1/emails" \
            -H "Authorization: Token ${{ secrets.BUTTONDOWN_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD"

          echo "## English email sent to English subscribers"


  send-spanish-emails:
    runs-on: ubuntu-latest
    needs: [filter-webhook-data, retrieve-subscribers]
    steps:
      - name: 'Download Spanish Post'
        uses: actions/download-artifact@v4
        with:
          name: spanish_post
          path: .

      - name: 'Check if Spanish Post Exists'
        id: check_spanish_post
        run: |
          if [[ -f "spanish_post.json" && -s "spanish_post.json" ]]; then
            echo "spanish_post_exists=true" >> $GITHUB_OUTPUT
          else
            echo "spanish_post_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: 'Download Subscribers Data'
        if: ${{ steps.check_spanish_post.outputs.spanish_post_exists == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: subscribers_data
          path: .

      - name: 'Read Spanish Post'
        if: ${{ steps.check_spanish_post.outputs.spanish_post_exists == 'true' }}
        id: read_spanish_post
        run: |
          echo "## Reading Spanish post from file"
          SPANISH_POST=$(cat spanish_post.json)
          echo "Spanish Post: $SPANISH_POST"

      - name: 'Filter Spanish Subscribers'
        if: ${{ steps.check_spanish_post.outputs.spanish_post_exists == 'true' }}
        id: filter_spanish
        run: |
          echo "## Filtering Spanish subscribers (language == 'es')"
          SUBSCRIBERS_DATA=$(cat subscribers_data.json)
          SPANISH_SUBSCRIBERS=$(echo "$SUBSCRIBERS_DATA" | jq -r '.[] | select(.language == "es") | .email' | tr '\n' ',' | sed 's/,$//')
          echo "spanish_emails=${SPANISH_SUBSCRIBERS}" >> spanish_emails.txt
          echo "Spanish Subscribers: $SPANISH_SUBSCRIBERS"

      - name: 'Send Email to Spanish Subscribers'
        if: ${{ steps.check_spanish_post.outputs.spanish_post_exists == 'true' }}
        run: |
          echo "## Sending email to Spanish subscribers"
          SPANISH_POST=$(cat spanish_post.json)
          SPANISH_EMAILS=$(cat spanish_emails.txt)

          # Construct the HTML body
          HTML_BODY=$(cat <<EOF
          <!DOCTYPE html>
          <html lang="es">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Nuevo Blog Publicado</title>
            <style>
              @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600&display=swap');
              body {
                font-family: 'Inter', sans-serif;
                background-color: #f8f9fa;
                color: #333;
                text-align: center;
                padding: 40px 0;
              }
              .card-container {
                display: flex;
                justify-content: center;
                align-items: center;
                margin: 20px;
              }
              .card {
                max-width: 500px;
                background: white;
                border-radius: 12px;
                box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
                overflow: hidden;
                text-decoration: none;
                transition: transform 0.2s ease-in-out;
              }
              .card:hover {
                transform: scale(1.03);
              }
              .card img {
                width: 100%;
                height: auto;
                border-bottom: 1px solid #ddd;
              }
              .card-content {
                padding: 20px;
              }
              .card-title {
                font-size: 20px;
                font-weight: 600;
                margin-bottom: 10px;
                color: #222;
              }
              .card-description {
                font-size: 16px;
                font-weight: 400;
                color: #555;
                line-height: 1.5;
              }
              .footer {
                margin-top: 30px;
                font-size: 14px;
                color: #777;
              }
            </style>
          </head>
          <body>
            <div class="card-container">
              <a href="$(echo "$SPANISH_POST" | jq -r '.url')" class="card">
                <img src="$(echo "$SPANISH_POST" | jq -r '.imageUrl')" alt="Blog Image">
                <div class="card-content">
                  <div class="card-title">$(echo "$SPANISH_POST" | jq -r '.title')</div>
                  <div class="card-description">$(echo "$SPANISH_POST" | jq -r '.feature')</div>
                </div>
              </a>
            </div>
            <p class="footer">Estás recibiendo este correo porque te suscribiste a actualizaciones. <br></p>
          </body>
          </html>
          EOF)

          # Construct the JSON payload
          PAYLOAD=$(jq -n \
            --arg subject "Nuevo: $(echo "$SPANISH_POST" | jq -r '.title')" \
            --arg from "harry-kelleher@buttondown.email" \
            --arg to "$SPANISH_EMAILS" \
            --arg html_body "$HTML_BODY" \
            '{
              subject: $subject,
              from: $from,
              to: $to,
              html_body: $html_body
            }')

          # Send the email
          curl -X POST "https://api.buttondown.email/v1/emails" \
            -H "Authorization: Token ${{ secrets.BUTTONDOWN_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD"

          echo "## Spanish email sent to Spanish subscribers"